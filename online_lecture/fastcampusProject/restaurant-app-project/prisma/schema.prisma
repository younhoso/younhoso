// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  likes         Like[]
}

model Store {
  id        Int      @id @default(autoincrement())
  phone     String?  // tel_no
  address   String?  // rdn_code_nm
  lat       String?  // y_dnts
  lng       String?  // x_cnts
  name      String?  // upso_nm
  category  String?  // bizcnd_code_nm
  storeType String?  // cob_code_nm
  foodCertifyName String? // crtfc_gbn_nm
  likes           Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  storeId   Int
  userId    Int
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId, storeId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  refresh_token_expires_in   Int?
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
model VerificationToken {
  identifier String
  token      String @unique
  expires    DateTime
 
  @@unique([identifier, token])
}

