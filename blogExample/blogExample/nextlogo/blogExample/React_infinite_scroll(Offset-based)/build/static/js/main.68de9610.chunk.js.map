{"version":3,"sources":["components/ReviewList.js","api.js","components/App.js","index.js"],"names":["formatDate","value","date","Date","getFullYear","getMonth","getDate","ReviewListItem","forwardRef","ref","item","onDelete","className","src","imgUrl","alt","title","rating","createdAt","content","onClick","id","ReviewList","items","setTarget","map","idx","lastItem","length","getReviews","order","offset","limit","query","fetch","response","json","body","App","useState","setOrder","setOffset","hasNext","setHasNext","setItems","target","sortedItems","sort","a","b","handleLoad","options","paging","reviews","useEffect","handleIntersection","observer","entries","isIntersecting","unobserve","io","IntersectionObserver","threshold","observe","disconnect","nextItems","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.68de9610.chunk.js","sourcesContent":["import React, { forwardRef } from \"react\";\nimport './ReviewList.css';\n\nfunction formatDate(value) {\n  const date = new Date(value);\n  return `${date.getFullYear()}. ${date.getMonth() + 1}. ${date.getDate()}`;\n}\n\nconst ReviewListItem = forwardRef(({ item, onDelete }, ref) => {\n  const handleDeleteClick = () => {\n    onDelete(item.id);\n  };\n\n  return (\n    <div className=\"ReviewListItem\" ref={ref}>\n      <img className=\"ReviewListItem-img\" src={item.imgUrl} alt={item.title} />\n      <div>\n        <h1>{item.title}</h1>\n        <p>{item.rating}</p>\n        <p>{formatDate(item.createdAt)}</p>\n        <p>{item.content}</p>\n        <button onClick={handleDeleteClick}>삭제</button>\n      </div>\n    </div>\n  );\n})\n\nfunction ReviewList({ items, onDelete, setTarget }) {\n  return (\n    <ul>\n      {items.map((item, idx) => {\n         // 새로 불어온 데이터 중 가장 마지막 값을 찾아 target으로 설정함 (마지막 데이터를 구독, 데이터를 새로 불러올 때마다 target이 바뀜)\n        const lastItem = idx === items.length - 1;\n        return (\n          <li key={idx}>\n            <ReviewListItem item={item} onDelete={onDelete} ref={lastItem ? setTarget : null} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nexport default ReviewList;\n","export async function getReviews({\n  order = 'createdAt',\n  offset = 0,\n  limit = 6,\n}) {\n  const query = `order=${order}&offset=${offset}&limit=${limit}`;\n  const response = await fetch(\n    `https://learn.codeit.kr/api/film-reviews?${query}`\n  );\n  const body = await response.json();\n  return body;\n}\n","import { useEffect, useState } from 'react';\nimport ReviewList from './ReviewList';\nimport { getReviews } from '../api';\n\nconst LIMIT = 6;\n\nfunction App() {\n  const [order, setOrder] = useState('createdAt');\n  const [offset, setOffset] = useState(0);\n  const [hasNext, setHasNext] = useState(true);\n  const [items, setItems] = useState([]);\n  const [target, setTarget] = useState(null); // 구독할 대상 (target을 지켜보고 있다가 이 target이 정해진 threshold 비율만큼 보이면 지정한 행동을 합니다. )\n  const sortedItems = items.sort((a, b) => b[order] - a[order]);\n\n  const handleNewestClick = () => setOrder('createdAt');\n\n  const handleBestClick = () => setOrder('rating');\n\n  const handleDelete = (id) => {\n    const nextItems = items.filter((item) => item.id !== id);\n    setItems(nextItems);\n  };\n\n  const handleLoad = async (options) => {\n    const { paging, reviews } = await getReviews(options);\n    if (options.offset === 0) {\n      setItems(reviews);\n    } else {\n      setItems([...items, ...reviews]);\n    }\n    setOffset(options.offset + options.limit);\n    setHasNext(paging.hasNext);\n  };\n\n  useEffect(() => {\n    let options = {\n      threshold: \"1\",\n    };\n\n    // 새롭게 생성할 observer가 수행할 행동 정의\n    let handleIntersection = async ([entries], observer) => {\n      if (entries.isIntersecting) {\n        hasNext && await handleLoad({ order, offset: offset, limit: LIMIT });\n        observer.unobserve(entries.target);\n      }\n    };\n\n    // 새로운 observer 생성\n    const io = new IntersectionObserver(handleIntersection, options);\n    if (target) io.observe(target);\n\n    offset === 0 && handleLoad({ order, offset: 0, limit: LIMIT })\n    return () => io && io.disconnect();\n    \n  }, [target, offset]);\n\n  return (\n    <div>\n      <div>\n        <button onClick={handleNewestClick}>최신순</button>\n        <button onClick={handleBestClick}>베스트순</button>\n      </div>\n      <ReviewList items={sortedItems} onDelete={handleDelete} setTarget={setTarget} />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}