(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
module.exports={ 
   "modelSlideCom": {
      "gallery": [
         {"imgPc":"wac_model_gallery01_pc", "imgMo":"wac_model_gallery01_mo", "alt":"신제품 무풍갤러리 제품", 
         "blind":"BESPOKE AI 무풍 갤러리 AF18DX839··· 3D 와이드 무풍 AI 에너지 절약 Bixby Care"},
         {"imgPc":"wac_model_gallery02_pc", "imgMo":"wac_model_gallery02_mo", "alt":"우측에는 신제품 무풍갤러리의 클로즈업 샷, 좌측에는 무풍홀을 클로즈업한 이미지가 배치됨", 
         "blind":"직바람/소음 걱정 없는 3D 와이드 무풍"},
         {"imgPc":"wac_model_gallery03_pc", "imgMo":"wac_model_gallery03_mo", "alt":"배경 좌측에는 신제품 무풍갤러리 스탠드형이 배치되어 있고, 배경 우측에는 식탁과 의자가 배치되어 있으며 그 위호 스마트폰 화면을 통해 에너지 사용량을 확인하는 이미지가 올려져 있음", 
         "blind":"상황에 맞게 전기료 관리해주는 AI 에너지 절약"},
         {"imgPc":"wac_model_gallery04_pc", "imgMo":"wac_model_gallery04_mo", "alt":"실내 거실 배경이며 좌측에는 벽걸이 TV와 TV장, 바닥에는 제트봇이 돌아다니고 있으며 TV를 마주보고 소파와 협탁이 배치되어 있고, 협탁위에는 화분이 놓여 있고, 뒤쪽 테라스에는 1인용 소파가 배치되어 있고 우측에는 제품 클로즈업 샷이 배치되어 있음", 
         "blind":"움직이지 않고 편하게, AI 집사가 알아서 관리하는 Bixby Care"},
         {"imgPc":"wac_model_gallery05_pc", "imgMo":"wac_model_gallery05_mo", "alt":"실내 인테리어컷으로 좌측애는 무풍갤러리 스탠드 제품이, 우측 하단에는 회색 소파가 배치되어 있으며, 우측에는 냉방운전 시뮬레이터의 On 상태와 Off 상태를 비교하는 실험 이미지가 배치되어 있음", 
         "blind":"사각지대 걱정 없이 빠르게 하이패스 서큘 냉방"}
      ],
      "classic": [
         {"imgPc":"wac_model_classic01_pc", "imgMo":"wac_model_classic01_mo", "alt":"무풍클래식 제품", 
         "blind":"무풍에어컨 클래식 AF18B9937···  |  AF17C7932··· 직바람 없는 무풍냉방 하이패스 회오리 냉방 이지케어 5단계"},
         {"imgPc":"wac_model_classic02_pc", "imgMo":"wac_model_classic02_mo", "alt":"실내 인테리어 컷이며 좌측에는 무풍클래식 제품, 우측에는 연한 청록색의 소파가 놓여 있으며, 중앙 하단에는 화분이 올려져있는 협탁이 배치되어 있고 무풍클래식 제품 좌측으로는 BESPOKE 디자인의 다양한 색상이 예시로 배치되어 있음", 
         "blind":"직바람 없는 무풍으로 소비전력 최대 90% 절약하는 무풍냉방"},
         {"imgPc":"wac_model_classic03_pc", "imgMo":"wac_model_classic03_mo", "alt":"실내 인테리어 컷으로 중앙에는 에어컨 제품과 제품에서 바람이 나오는 모습을 일러스트 요소를 더해 형상화 했으며, 중앙 하단에는 회색 소파와 협탁이 배치되어 있고 이미지 좌측에는 하이패스 방식을 소개하는 이미지가 배치되어 있음", 
         "blind":"하이패스 방식으로 넓은 공간도 빠르게 회오리 냉방"},
         {"imgPc":"wac_model_classic04_pc", "imgMo":"wac_model_classic04_mo", "alt":"실내 인테리어 컷으로 좌측에는 청색 벽지와 흰색 1인용 소파, 작은 협탁이, 우측에는 흰색 벽지에 무풍클래식 제품이 배치되어 있고 중앙에는 스피드 냉방 대비 최대 85% 소비전력을 절약한다는 안내 문구가 배치 ", 
         "blind":"99.9% UV LED 팬 살균으로 더 편리해진 이지케어 5단계"}
      ],
      "q9000": [
         {"imgPc":"wac_model_q900001_pc", "imgMo":"wac_model_q900001_mo", "alt":"Q9000 제품", 
         "blind":"Q9000 AF19B6474···  |  AF17B6474··· 하이패스 회오리 냉방 바람문 컨트롤 절전 이지케어 4단계"},
         {"imgPc":"wac_model_q900002_pc", "imgMo":"wac_model_q900002_mo", "alt":"실내 인테리어 컷이며 좌측에는 Q9000 제품, 우측에는 회색의 소파가 놓여 있으며, 중앙 하단에는 병이 올려져있는 협탁이 배치되어 있고 Q9000 제품 좌측으로는 BESPOKE 디자인의 다양한 색상이 예시로 배치되어 있음", 
         "blind":"우리 집에 맞게 디자인하는 BESPOKE 디자인"},
         {"imgPc":"wac_model_q900003_pc", "imgMo":"wac_model_q900003_mo", "alt":"실내 인테리어 컷으로 중앙에는 에어컨 제품과 제품에서 바람이 나오는 모습을 일러스트 요소를 더해 형상화 했으며, 중앙 하단에는 회색 소파와 협탁이 배치되어 있고 이미지 좌측에는 하이패스 방식을 소개하는 이미지가 배치되어 있음", 
         "blind":"하이패스 방식으로 넓은 공간도 빠르게 회오리 냉방"},
         {"imgPc":"wac_model_q900004_pc", "imgMo":"wac_model_q900004_mo", "alt":"중앙에 2대의 Q9000 제품이 배치되어 있으며 좌측 제품은 소비전력 100% 상태, 우측 제품은 바람문 컨트롤 절전으로 최대 60% 에너지가 절감된 모습을 나타냄", 
         "blind":"최대 60%까지 소비 전력 절약 바람문 컨트롤 절전"},
         {"imgPc":"wac_model_q900005_pc", "imgMo":"wac_model_q900005_mo", "alt":"실내 인테리어 컷이며 우측에는 흰색 커튼과 Q9000 제품이 배치되어 있고, 좌측 상단에는 자동맞춤, 시간맞춤, 저소음맞춤 기능에 대한 설명, 좌측 하단에는 습도에 따라 내부를 건조하는 자동 건조 기능을 상세히 설명",  
         "blind":"관리가 더 편해진 이지케어 4단계"}
      ]
   },
   "modelSlideSys": {
      "system": [
         {"imgPc":"wac_model_system01_pc", "imgMo":"wac_model_system01_mo", "alt":"시스템에어컨 평면도", 
         "blind":"BESPOKE 무풍 시스템에어컨 AJ·········SSY 직바람 없는 무풍냉방 최대 61% 절전냉방 무풍청정 살균필터"},
         {"imgPc":"wac_model_system02_pc", "imgMo":"wac_model_system02_mo", "alt":"천장에 배치된 시스템에어컨과 해당 제품의 마이크로 홀을 통한 미세한 냉기로 무풍냉방이 완성된다는 설명, 우측 하단에는 창문이 보이는 이미지", 
         "blind":"10,000여개의 마이크로 홀로 직바람 없이 시원한 무풍냉방"},
         {"imgPc":"wac_model_system03_pc", "imgMo":"wac_model_system03_mo", "alt":"어두운 배경에 시스템 에어컨이 배치되어 있으며 좌측은 일반 시스템에어컨, 우측은 삼성 무풍 시스템에어컨이 배치되어 있고, 일반 시스템에어컨 대비 당사 제품의 에너지 절감을 나타내는 아이콘이 하단에 삽입된", 
         "blind":"무풍운전 시 일반운전 대비 최대 61%까지 에너지 절감"},
         {"imgPc":"wac_model_system04_pc", "imgMo":"wac_model_system04_mo", "alt":"통창 구조의 거실 배경, 창밖에는 잔디 밭이 보이며, 우측에는 다인용 소파와 조명, 좌측에는 식탁, 바닥에는 러그가 배치되어 있고 좌측 천장에 배치된 시스템 에어컨에서 냉기가 뿜어져 나오는", 
         "blind":"냉기를 더 멀리 더 빠르게 균일냉방"},
         {"imgPc":"wac_model_system05_pc", "imgMo":"wac_model_system05_mo", "alt":"하얀 실내에 세로형 창문이 2개 배치되어 있으며, 우측 천장의 시스템에어컨에서 냉기가 뿜어져 나오고 좌측 하단에는 당사 제품의 프리필터, PM 1.0필터, 탈취필터를 나타내는 이미지로 삼성 무풍 시스템에어컨의 살균필터 기능을 소개하는", 
         "blind":"살균필터로 사계절 내내 무풍청정 깨끗한 공기"}
      ],
      "infinite": [
         {"imgPc":"wac_model_infinite01_pc", "imgMo":"wac_model_infinite01_mo", "alt":"시스템에어컨 Infinite Line 평면도", 
         "blind":"BESPOKE 무풍 시스템에어컨 Infinite Line AN·········SSY 인피니트 디자인 엣지 라이팅 와이드 무풍냉방"},
         {"imgPc":"wac_model_infinite02_pc", "imgMo":"wac_model_infinite02_mo", "alt":"어두운 배경에서 설치되어 있는 시스템 에어컨에서 엣지 라이팅 기능으로 조명이 비추는 이미지", 
         "blind":"공간의 무드를 만들어내는 엣지 라이팅"},
         {"imgPc":"wac_model_infinite03_pc", "imgMo":"wac_model_infinite03_mo", "alt":"검정 배경에 우측에는 시스템에어컨 제품이 있는", 
         "blind":"고효율 에너지 맞춤절전 와이드 무풍"},
         {"imgPc":"wac_model_infinite04_pc", "imgMo":"wac_model_infinite04_mo", "alt":"좌측 이미지에는 실내 공간에서 시스템 에어컨을 통해 냉방이 되고 있음을 보여주는 인테리어 컷이 있고, 바람과 함께 나뭇잎 흩날리는 모습을 통해 절약 냉방을 나타냄", 
         "blind":"상황에 맞춰 에너지를 절감하는 AI 절약모드"},
         {"imgPc":"wac_model_infinite05_pc", "imgMo":"wac_model_infinite05_mo", "alt":"무풍 시스템에어컨 Infinte Line의 필터와 내부 제품을 배치했으며, 우측에는 리모콘이 함께 배치되어 있어 리모콘의 특정 버튼 클릭시 실행되는 청정케어 8단계에 대한 상세한 설명을 나타내는", 
         "blind":"알아서 a맞춰주는 BESPOKE Infinite AI 맞춤쾌적"}
      ]
   }
}
},{}],2:[function(require,module,exports){
"use strict";

var _modelSlide = _interopRequireDefault(require("../data/modelSlide.json"));
var _bs_common = require("./modules/bs_common");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
$(document).ready(function () {
  let config = {
    slideImgCom: _modelSlide.default.modelSlideCom,
    slideImgSys: _modelSlide.default.modelSlideSys,
    comSlideWrap: document.querySelector(".sec_model--com .pt_model__wrapper"),
    sysSlideWrap: document.querySelector(".sec_model--sys .pt_model__wrapper"),
    // 라인별 추천 모델 : 240110. Mark 추가
    variables: {
      modelNavs: document.querySelectorAll('.pt_tab--com .pt_tab__item'),
      modelConts: document.querySelectorAll('.pt_model__swiper--com .pt_model__item'),
      autoPlayState: document.querySelector('.pt_model__state--com'),
      playBtn: document.querySelector('.pt_model__state--com button.play'),
      stopBtn: document.querySelector('.pt_model__state--com button.stop'),
      swiperIns: null,
      buyingBtn: document.querySelector('.model_2--com'),
      modelPopClose: document.querySelector('.pt_model_pop--com .btn_close')
    },
    //com

    variablesSys: {
      modelNavs: document.querySelectorAll('.pt_tab--sys .pt_tab__item'),
      modelConts: document.querySelectorAll('.pt_model__swiper--sys .pt_model__item'),
      autoPlayState: document.querySelector('.pt_model__state--sys'),
      playBtn: document.querySelector('.pt_model__state--sys button.play'),
      stopBtn: document.querySelector('.pt_model__state--sys button.stop'),
      swiperIns: null,
      buyingBtn: document.querySelector('.model_2--sys'),
      modelPopClose: document.querySelector('.pt_model_pop--sys .btn_close')
    },
    //sys

    //com
    lineModelSwiper() {
      let _this = this;

      // conts swiper
      const contentSwiper = new Swiper(".sec_model--com .pt_model__swiper", {
        slidesPerView: 1,
        allowTouchMove: true,
        observer: true,
        observeParents: true,
        preloadImages: false,
        lazy: true,
        // autoHeight: true,
        autoplay: {
          enabled: true,
          disableOnInteraction: true,
          delay: 3000
        },
        navigation: {
          prevEl: '.sec_model--com .pt_model__prev',
          nextEl: '.sec_model--com .pt_model__next'
        },
        pagination: {
          el: ".pt_model__swiper--com .pt_model__pagenation",
          clickable: true
        },
        a11y: {
          prevSlideMessage: '이전 슬라이드',
          nextSlideMessage: '다음 슬라이드',
          slideLabelMessage: '총 {{slidesLength}}장의 슬라이드 중 {{index}}번 슬라이드 입니다.'
        },
        breakpoints: {
          320: {
            allowTouchMove: true
          },
          768: {
            allowTouchMove: true
          }
        },
        on: {
          transitionStart: function () {
            // _this.lineModelNav(this.activeIndex);
            // navSwiper.slideTo(this.activeIndex, 500);
            this.slideTo(this.activeIndex, 500);

            // 스와이핑하면 오토플레이 멈추는 버그 해결
            if (_this.variables.autoPlayState.classList.contains('play') && document.body.clientWidth < 769) {
              contentSwiper.autoplay.start();
            }
            // 마지막 요소에 접근 시 activeIndex가 마지막 요소 못잡는 이슈 해결
            // if(this.isEnd) {
            //     _this.lineModelNav(this.activeIndex + 1);
            // }
          },
          breakpoint: function () {
            var that = this;
            setTimeout(function () {
              that.slideTo(0, 0);
              for (let i = 0; i < that.slides.length; i++) {
                that.slides[i].setAttribute('style', '');
              }
            }, 150);
          }
        }
      });
      return {
        contentSwiper
      };
    },
    lineModelPlay() {
      // 상태 : 플레이
      this.variables.autoPlayState.classList.add('play');
      this.variables.autoPlayState.classList.remove('stop');
      this.variables.playBtn.style.display = 'none';
      this.variables.stopBtn.style.display = 'block';
      this.variables.swiperIns.contentSwiper.autoplay.start();
    },
    lineModelStop() {
      // 상태 : 정지
      this.variables.autoPlayState.classList.add('stop');
      this.variables.autoPlayState.classList.remove('play');
      this.variables.playBtn.style.display = 'block';
      this.variables.stopBtn.style.display = 'none';
      this.variables.swiperIns.contentSwiper.autoplay.stop();
    },
    modelPopOpen() {
      // 팝업 오픈
      setTimeout(() => {
        this.variables.swiperIns = this.lineModelSwiper();
        this.variables.swiperIns.contentSwiper.update();
      }, 0);
    },
    modelPopClose() {
      this.variables.swiperIns.contentSwiper.destroy();
      this.variables.autoPlayState.classList.add('play');
      this.variables.autoPlayState.classList.remove('stop');
      this.variables.playBtn.style.display = 'none';
      this.variables.stopBtn.style.display = 'block';
    },
    //com e

    //sys
    lineModelSwiperSys() {
      let _this = this;

      // conts swiper
      const contentSwiperSys = new Swiper(".sec_model--sys .pt_model__swiper", {
        slidesPerView: 1,
        allowTouchMove: true,
        observer: true,
        observeParents: true,
        preloadImages: false,
        lazy: true,
        // autoHeight: true,
        autoplay: {
          enabled: true,
          disableOnInteraction: true,
          delay: 3000
        },
        navigation: {
          prevEl: '.sec_model--sys .pt_model__prev',
          nextEl: '.sec_model--sys .pt_model__next'
        },
        pagination: {
          el: ".pt_model__swiper--sys .pt_model__pagenation",
          clickable: true
        },
        a11y: {
          prevSlideMessage: '이전 슬라이드',
          nextSlideMessage: '다음 슬라이드',
          slideLabelMessage: '총 {{slidesLength}}장의 슬라이드 중 {{index}}번 슬라이드 입니다.'
        },
        breakpoints: {
          320: {
            allowTouchMove: true
          },
          768: {
            allowTouchMove: true
          }
        },
        on: {
          transitionStart: function () {
            // _this.lineModelNav(this.activeIndex);
            // navSwiper.slideTo(this.activeIndex, 500);
            this.slideTo(this.activeIndex, 500);

            // 스와이핑하면 오토플레이 멈추는 버그 해결
            if (_this.variables.autoPlayState.classList.contains('play') && document.body.clientWidth < 769) {
              contentSwiperSys.autoplay.start();
            }
            // 마지막 요소에 접근 시 activeIndex가 마지막 요소 못잡는 이슈 해결
            // if(this.isEnd) {
            //     _this.lineModelNav(this.activeIndex + 1);
            // }
          },
          breakpoint: function () {
            var that = this;
            setTimeout(function () {
              that.slideTo(0, 0);
              for (let i = 0; i < that.slides.length; i++) {
                that.slides[i].setAttribute('style', '');
              }
            }, 150);
          }
        }
      });
      return {
        contentSwiperSys
      };
    },
    lineModelPlaySys() {
      // 상태 : 플레이
      this.variablesSys.autoPlayState.classList.add('play');
      this.variablesSys.autoPlayState.classList.remove('stop');
      this.variablesSys.playBtn.style.display = 'none';
      this.variablesSys.stopBtn.style.display = 'block';
      this.variablesSys.swiperIns.contentSwiperSys.autoplay.start();
    },
    lineModelStopSys() {
      // 상태 : 정지
      this.variablesSys.autoPlayState.classList.add('stop');
      this.variablesSys.autoPlayState.classList.remove('play');
      this.variablesSys.playBtn.style.display = 'block';
      this.variablesSys.stopBtn.style.display = 'none';
      this.variablesSys.swiperIns.contentSwiperSys.autoplay.stop();
    },
    modelPopOpenSys() {
      // this.variables.buyingBtn.addEventListener('click', e => this.variablesSys.buyingTarget.click())
      // 팝업 오픈
      setTimeout(() => {
        this.variablesSys.swiperIns = this.lineModelSwiperSys();
        this.variablesSys.swiperIns.contentSwiperSys.update();
      }, 0);
    },
    modelPopCloseSys() {
      this.variablesSys.swiperIns.contentSwiperSys.destroy();
      this.variablesSys.autoPlayState.classList.add('play');
      this.variablesSys.autoPlayState.classList.remove('stop');
      this.variablesSys.playBtn.style.display = 'none';
      this.variablesSys.stopBtn.style.display = 'block';
    },
    //sys e

    init() {
      // 라인별 추천 모델 : 240110. Mark 추가
      // this.variables.swiperIns = this.lineModelSwiper(); // 먼저 실행하면 안됨. 클릭했을 때 실행하는걸로 
      //com
      this.variables.playBtn.addEventListener('click', this.lineModelPlay.bind(this));
      this.variables.stopBtn.addEventListener('click', this.lineModelStop.bind(this));
      this.variables.buyingBtn.addEventListener('click', this.modelPopOpen.bind(this));
      this.variables.modelPopClose.addEventListener('click', this.modelPopClose.bind(this));
      //com e
      //sys
      this.variablesSys.playBtn.addEventListener('click', this.lineModelPlaySys.bind(this));
      this.variablesSys.stopBtn.addEventListener('click', this.lineModelStopSys.bind(this));
      this.variablesSys.buyingBtn.addEventListener('click', this.modelPopOpenSys.bind(this));
      this.variablesSys.modelPopClose.addEventListener('click', this.modelPopCloseSys.bind(this));
      //sys e
    }
  };
  config.init();
  const modelTabCom = document.querySelectorAll('.pt_tab--com .pt_tab__item');
  const modelTabSys = document.querySelectorAll('.pt_tab--sys .pt_tab__item');
  const modelLinkCom = document.querySelector('.sec_model--com .pt_model__link');
  const modelLinkSys = document.querySelector('.sec_model--sys .pt_model__link');

  /** 일반에어컨 추천모델 슬라이드 렌더링 */
  function lenderHtmlCom(model) {
    let imgModel = config.slideImgCom[model];
    let slideHtml = '';
    for (let i = 0, imgLen = imgModel.length; i < imgLen; i++) {
      slideHtml += `
            <div class="swiper-slide pt_model__item">
                <div class="pt_model__img-box">
                    <img src="../../is/images/model/${imgModel[i].imgPc}.jpg" alt="${imgModel[i].alt}" class="m_hide" loading="lazy" />
                    <img src="../../is/images/model/${imgModel[i].imgMo}.jpg" alt="${imgModel[i].alt}" class="m_show" loading="lazy" />
                </div>
                <p class="blind">${imgModel[i].blind}</p>
            </div>
        `;
    }
    config.comSlideWrap.insertAdjacentHTML("afterbegin", slideHtml);
  }
  modelTabCom.forEach(el => {
    el.addEventListener('click', e => {
      e.preventDefault();
      modelTabCom.forEach(function (item) {
        item.classList.remove('active');
      });
      el.classList.add('active');
      config.comSlideWrap.innerHTML = '';
      let tabModel = el.getAttribute("data-model");
      lenderHtmlCom(tabModel);
      setTimeout(function () {
        $(".sec_model--com .pt_model__swiper")[0].swiper.slideTo(0);
        config.lineModelPlay();
      }, 0);
      if (tabModel == "gallery") {
        modelLinkCom.setAttribute('data-role-anchor', 'recomm_gallery');
        modelLinkCom.setAttribute('data-omni', 'sec:event:air-conditioners:tab_popup_new-gallery_view_product');
        modelLinkCom.innerText = 'BESPOKE AI 무풍 갤러리 제품 보러가기 >';
      } else if (tabModel == "classic") {
        modelLinkCom.setAttribute('data-role-anchor', 'recomm_classic');
        modelLinkCom.setAttribute('data-omni', 'sec:event:air-conditioners:tab_popup_classic_view_product');
        modelLinkCom.innerText = '무풍에어컨 클래식 제품 보러가기 >';
      } else if (tabModel == "q9000") {
        modelLinkCom.setAttribute('data-role-anchor', 'recomm_q9000');
        modelLinkCom.setAttribute('data-omni', 'sec:event:air-conditioners:tab_popup_q9000_view_product');
        modelLinkCom.innerText = 'Q9000 제품 보러가기 >';
      }
    });
  });

  /** 시스템에어컨 추천모델 슬라이드 렌더링 */
  function lenderHtmlSys(model) {
    let imgModel = config.slideImgSys[model];
    let slideHtml = '';
    for (let i = 0, imgLen = imgModel.length; i < imgLen; i++) {
      slideHtml += `
        <div class="swiper-slide pt_model__item">
          <div class="pt_model__img-box">
              <img src="../../is/images/model/${imgModel[i].imgPc}.jpg" alt="${imgModel[i].alt}" class="m_hide" loading="lazy" />
              <img src="../../is/images/model/${imgModel[i].imgMo}.jpg" alt="${imgModel[i].alt}" class="m_show" loading="lazy" />
          </div>
          <p class="blind">${imgModel[i].blind}</p>
        </div>
      `;
    }
    config.sysSlideWrap.insertAdjacentHTML("afterbegin", slideHtml);
  }
  modelTabSys.forEach(el => {
    el.addEventListener('click', e => {
      e.preventDefault();
      modelTabSys.forEach(function (item) {
        item.classList.remove('active');
      });
      el.classList.add('active');
      config.sysSlideWrap.innerHTML = '';
      let tabModel = el.getAttribute("data-model");
      lenderHtmlSys(tabModel);
      setTimeout(function () {
        $(".sec_model--sys .pt_model__swiper")[0].swiper.slideTo(0);
        config.lineModelPlaySys();
      }, 0);
    });
  });
});

},{"../data/modelSlide.json":1,"./modules/bs_common":3}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.util = exports.tab = exports.modal = exports.countDownEvt = exports.copy = exports.button = exports.anchor = exports.accordian = exports.PT_STATE = void 0;
const $window = $(window);
const PT_STATE = exports.PT_STATE = {
  $PROJECT: $('.sec_project_wrap'),
  eventState: {}
};

//  * @todo 해야 하는일
//  * @example <caption>Example usage of method1.</caption>
//  * returns 2
//  * globalNS.method1(5, 10);
//  * @deprecated [더이상 사용되지 않는 기능 버전 0.1]
//  * @version 0.1

const util = exports.util = {
  /**
   * 해당 화면이 768 미만이면 true 리턴
   * @returns boolean
   */
  isMobile() {
    return $window.outerWidth() <= 768;
  },
  /**
   * ',' 추가 함수 ex) 9999 => 9,999
   * @param {number} numberStr
   */
  addComma(num) {
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  },
  /**
   * ',' 제거 함수 ex) 9,999 => 9999
   * @param {string} numberStr
   */
  removeComma(num) {
    return +num.replace(/,/g, '');
  },
  /**
   * pc 1440, mo 720 기준으로 px값을 vw값으로 변환
   * @param {number} pc pc 픽셀 값
   * @param {number} mo mo 픽셀 값, 인자 값이 없을경우 pc 픽셀 값으로 계산
   */
  pxToVw(pc, mo) {
    const winWidth = $window.outerWidth();
    const divide = util.isMobile() ? 720 : 1440;
    const pixel = util.isMobile() ? mo === undefined ? pc : mo : pc;
    return pixel >= 0 ? Math.min(pixel, pixel / divide * winWidth) : Math.max(pixel, pixel / divide * winWidth);
  },
  /**
   * makeAlert이 정의가 되어 있으면 makeAlert 함수 호출
   * @param {string} message
   */
  alert: function (message) {
    typeof makeAlert == 'function' ? makeAlert(message) : alert(message);
  },
  /**
   * 현재 주소의 파리미터 값 '=' 뒤에 텍스트 리턴 함수 ex) ?name=value
   * @param {string} name
   * @returns value
   */
  getParameterByName: function (name) {
    const regex = new RegExp(`[\\?&]${name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]')}=([^&#]*)`);
    const results = regex.exec(location.search);
    return results == null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
  },
  /**
   * PT_STATE eventState 상태 값 저장
   * @param {string} key eventState key값
   * @param {object} params eventState value 값
   */
  setEventState: function (key, params) {
    if (!PT_STATE.eventState[key]) {
      PT_STATE.eventState[key] = params;
    } else {
      PT_STATE.eventState[key] = Object.assign(PT_STATE.eventState[key], params);
    }
  },
  /**
   * PT_STATE eventState 상태 값 불러오기
   * @param {string} key eventState key값
   * @returns eventState value 값
   */
  getEventState: function (key) {
    return PT_STATE.eventState[key];
  },
  /**
   * 해당 이벤트의 값을 가진 객체를 return 하는 함수
   * @param {*} params 해당 배열
   * @param {*} key 찾는 key 값
   * @param {*} val 찾는 val 값
   * @returns 해당 객체
   */
  findItem: function (params, key, val) {
    const {
      [key]: evtItem,
      ...item
    } = params.filter(item => item[key] === val)[0];
    return item;
  }
};
const anchor = exports.anchor = {
  /**
   * 버튼 클릭 시 페이지 내 data-target으로 앵커 이동
   * @param {object} params {'target': str, 'speed': num, 'scroll': [pc,mo]}
   * @desc target : 해당 타켓
   * @desc speed : 이동 속도
   * @desc scroll : 이동 후 추가 여백
   */
  click(params) {
    util.setEventState('clickAnc', params);
    const data = {
      opt: {
        speed: 500,
        scroll: [0, 0]
      },
      params: util.getEventState('clickAnc')
    };
    PT_STATE.$PROJECT.off('click.clickAnc').on('click.clickAnc', '[data-role-anchor]', function (e) {
      e.preventDefault();
      const $this = $(this);
      const {
        target,
        speed = data.opt.speed,
        scroll = data.opt.scroll
      } = util.findItem(data.params, 'el', `[data-role-anchor="${$this.attr('data-role-anchor')}"]`);
      let ancClick = $this.attr('data-role-anchor');
      if (ancClick == 'notice_jet') {
        if (!$('[data-role-accordian="benefit_acco_jet"]').hasClass('active')) {
          $('[data-role-accordian="benefit_acco_jet"]').trigger('click');
        }
      }
      if (ancClick == 'notice_jet_point') {
        if (!$('[data-role-accordian="benefit_acco_jet"]').hasClass('active')) {
          $('[data-role-accordian="benefit_acco_jet"]').trigger('click');
        }
      }
      if (ancClick == 'notice_air01') {
        if (!$('[data-role-accordian="benefit_acco_air"]').hasClass('active')) {
          $('[data-role-accordian="benefit_acco_air"]').trigger('click');
        }
      }
      if (ancClick == 'notice_air02') {
        if (!$('[data-role-accordian="benefit_acco_air"]').hasClass('active')) {
          $('[data-role-accordian="benefit_acco_air"]').trigger('click');
        }
      }
      $('html, body').stop().animate({
        scrollTop: $(target).offset().top + util.pxToVw(scroll[0], scroll[1])
      }, speed, function () {
        if (ancClick == 'notice_jet' || ancClick == 'notice_air01' || ancClick == 'notice_air02') {
          $(target).attr('tabindex', 0).focus();
        } else {
          $(target).focus();
        }
      });
      if (ancClick == 'pt_nav05') {
        $('.pt_nav05 a').trigger('click');
      }
    });
    $('[data-focus="notice_jet"]').focusout(function () {
      $('[data-focus="notice_jet"]').removeAttr('tabindex');
    });
    $('[data-focus="notice_air01"]').focusout(function () {
      $('[data-focus="notice_air01"]').removeAttr('tabindex');
    });
    $('[data-focus="notice_air02"]').focusout(function () {
      $('[data-focus="notice_air02"]').removeAttr('tabindex');
    });
  },
  /**
   * 화면 로드 후 paramsData.target으로 앵커드 이동
   * @param {object} params target:해당 타겟, speed: 속도, scroll: 추가 여백
   * @desc key : 기본 anc key값 변경 필요시 사용
   * @desc target : 해당 타켓
   * @desc speed : 이동 속도
   * @desc scroll : 이동 후 추가 여백
   */
  load(params) {
    util.setEventState('loadAnc', params);
    const data = {
      opt: {
        key: 'anc',
        speed: 500,
        scroll: [0, 0]
      },
      params: util.getEventState('loadAnc')
    };
    const param = util.getParameterByName(data.opt.key);

    // PT_STATE.ancLoadList = params;
    // console.log('load', PT_STATE);

    if (!param) return;
    const {
      target,
      speed = data.opt.speed,
      scroll = data.opt.scroll,
      handleLoadAncTarget = data.opt.handleLoadAncTarget,
      beforeScrollStart = data.opt.beforeScrollStart,
      offScroll = data.opt.beforeScrollStart
    } = util.findItem(data.params, 'url', param);
    if (beforeScrollStart && typeof beforeScrollStart == 'function') {
      beforeScrollStart();
    }
    // 240213 로드 시 앵커드 이동 및 클릭
    if (handleLoadAncTarget && typeof handleLoadAncTarget == 'function') {
      handleLoadAncTarget();
    }
    $window.off('load.loadAnc').on('load.loadAnc', function () {
      try {
        if (!offScroll) $('html, body').stop().animate({
          scrollTop: $(target).offset().top + util.pxToVw(scroll[0], scroll[1])
        }, speed);
      } catch (err) {
        console.log('해당하는 앵커 영역이 없습니다.');
      }
    });
  },
  /**
   * 바잉툴 출력 후 paramsData.target으로 앵커드 이동
   * @param {object} params target:해당 타겟, speed: 속도, scroll: 추가 여백
   * @desc key : 기본 anc key값 변경 필요시 사용
   * @desc target : 해당 타켓
   * @desc speed : 이동 속도
   * @desc scroll : 이동 후 추가 여백
   */
  reset() {
    console.log('reset', PT_STATE.ancLoadList);

    // util.setEventState('loadAnc', params);

    // const data = {
    //     opt: {
    //         key: 'anc',
    //         speed: 500,
    //         scroll: [0, 0],
    //     },
    //     params: util.getEventState('loadAnc')
    // };

    // const param = util.getParameterByName(data.opt.key);

    // if (!param) return;

    // const { target, speed = data.opt.speed, scroll = data.opt.scroll, beforeScrollStart = data.opt.beforeScrollStart } = util.findItem(data.params, 'url', param);

    // if (beforeScrollStart && typeof beforeScrollStart == 'function') {
    //     beforeScrollStart();
    // }

    // $window.off('load.loadAnc').on('load.loadAnc', function () {
    //     try {
    //         $('html, body').stop().animate({ scrollTop: $(target).offset().top + util.pxToVw(scroll[0], scroll[1]) }, speed);
    //     } catch (err) {
    //         console.log('해당하는 앵커 영역이 없습니다.');
    //     }
    // });
  }
};
const accordian = exports.accordian = {
  /**
   * 토글 버튼 클릭 시 페이지 내 data-target show/hide
   * @param {object} params {'target': str, 'speed': num, 'group': str, 'openFocus': str, 'open': boolean}
   * @desc target : 해당 타켓
   * @desc speed : 토글 속도
   * @desc group : 그룹 지정시 동일한 그룹명 지정
   * @desc openFocus : 토글 오픈 후 컨텐츠 타켓
   * @desc open : 페이지 로드 후 컨텐츠 오픈 유무
   */
  toggle(params) {
    util.setEventState('clickToggle', params);
    const data = {
      opt: {
        speed: 0,
        openFocus: false,
        open: false
      },
      params: util.getEventState('clickToggle')
    };

    //토글 열기
    PT_STATE.$PROJECT.off('click.toggleAcc').on('click.toggleAcc', '[data-role-accordian]', function (e) {
      e.preventDefault();
      const $this = $(this);
      const {
        target,
        speed = data.opt.speed,
        openFocus = data.opt.openFocus,
        group
      } = util.findItem(data.params, 'el', `[data-role-accordian="${$this.attr('data-role-accordian')}"]`);
      if (group && !$this.hasClass('active')) {
        const arr = Object.values(data.params).filter(item => item.group === group);
        arr.forEach(item => {
          $(item.el).removeClass('active');
          $(item.target).stop().slideUp(speed);
        });
      }

      // $this.toggleClass('active');
      // $this.hasClass('active') ? $(target).stop().slideDown(speed) : $(target).stop().slideUp(speed);
      // $(target).attr('tabindex', 0);

      $this.toggleClass('active');
      $this.hasClass('active') ? $(target).stop().slideDown(speed) : $(target).stop().slideUp(speed);

      // 토글클릭시 앵커이동 안되게
      if (!util.isMobile() && target == "#pt_step_jet1" || !util.isMobile() && target == "#pt_step_jet2" || !util.isMobile() && target == "#pt_step_jet3" || !util.isMobile() && target == "#pt_step_air1" || !util.isMobile() && target == "#pt_step_air2" || !util.isMobile() && target == "#pt_step_air3") {} else {
        $('html, body').stop().animate({
          scrollTop: $(target).is(':visible') && openFocus ? $(target).offset().top : $(target).is(':visible') && $this.hasClass('active') ? $this.offset().top : $(window).scrollTop()
        }, 500);
      }

      // $('html, body').stop().animate({ scrollTop: $(target).is(':visible') && openFocus ? $(target).offset().top : $this.offset().top }, 500, function(){
      //     $(target).focusout(function(){
      //         $(target).removeAttr('tabindex');
      //     });
      // });
      //$(target).attr('tabindex', 0);

      /* 230414 해당영역 포커스 제거
      $(target).focus(); */
    });

    //토글 닫기
    PT_STATE.$PROJECT.off('click.closeAcc').on('click.closeAcc', '[data-role-accordianClose]', function (e) {
      e.preventDefault();
      const $this = $(this);
      const target = $this.attr('data-role-accordianClose');

      //$(`[data-role-accordian="${target}"]`).click().focus();
      $(`[data-role-accordian="${target}"]`).click();
      $('html, body').stop().animate({
        scrollTop: $(`[data-role-accordian="${target}"]`).offset().top
      }, 500, function () {
        $(target).focusout(function () {
          $(target).removeAttr('tabindex');
        });
      });
    });

    //토글 컨탠츠 hide 처리
    PT_STATE.$PROJECT.find('[data-role-accordian]').each(function () {
      const $this = $(this);
      const {
        target,
        open = data.opt.open
      } = util.findItem(data.params, 'el', `[data-role-accordian="${$this.attr('data-role-accordian')}"]`);
      open ? $this.addClass('active') : $(target).hide();
    });
  }
};
const tab = exports.tab = {
  /**
   * 탭 버튼 클릭시 해당 타겟 show 하는 함수
   * @param {object} params {'target': str, 'default': num}
   * @desc target : 해당 타켓
   * @desc default : 화면 로드 시 초기 액티브 index
   */

  click(params) {
    util.setEventState('clickTab', params);
    const data = {
      params: util.getEventState('clickTab')
    };

    //탭 클릭시 타겟 show
    PT_STATE.$PROJECT.off('click.clickTab').on('click.clickTab', '[data-role-tab] > a', function (e) {
      e.preventDefault();
      const $this = $(this);
      if ($this.hasClass('active')) return;
      const $parent = $this.closest('[data-role-tab]');
      const {
        target
      } = util.findItem(data.params, 'el', `[data-role-tab="${$parent.attr('data-role-tab')}"]`);
      const _index = $this.index();

      //a11y
      $parent.find('.selected_option').remove();
      $this.addClass('active').siblings().removeClass('active');
      $this.append('<span class="blind selected_option">선택됨</span>');
      $(target).each((idx, item) => {
        $(item).children().eq(_index).show().siblings().hide();
      });
    });

    //초기값 제외 hide 처리
    Object.values(data.params).forEach(item => {
      const {
        el,
        default: _index = 0
      } = item;
      $(el).children().eq(_index).trigger('click');
    });
  }
};
const modal = exports.modal = {
  /** 모달오픈버튼 클릭시 dimm 처리와 모달 오픈 함수 */
  init() {
    //모달 오픈
    PT_STATE.$PROJECT.off('.click.clickModal').on('click.clickModal', '[data-role="btnModal"]', function (e) {
      e.preventDefault();
      const data = {
        $prevfocus: [],
        opt: {
          video: false,
          youtube: false,
          focus: false
        }
      };
      const $this = $(this);
      const $target = $($this.attr('data-target'));
      const target = $this.attr('data-target');
      const $closeModal = $(`[data-role="closeModal"][data-target="${target}"]`);
      const winTop = $window.scrollTop();
      const winHeight = $window.outerHeight();
      const targetHeight = $target.outerHeight();
      const headerHeight = !!$('header') ? $('header').outerHeight() : 0;
      const opt = $this.attr('data-option') ? JSON.parse($this.attr('data-option')) : data.opt;
      const {
        video = data.opt.video,
        youtube = data.opt.youtube,
        focus = data.opt.focus
      } = opt;
      const dimm_id = `dimm_${new Date().getTime()}`;
      // const tapHeight = !!$('.sec_kv_tab') ? $('.sec_kv_tab').outerHeight() : 0;
      // const bannerHeight = !!$('.ins-preview-wrapper') ? $('.ins-preview-wrapper').outerHeight() : 0;

      data.$prevfocus.push($this);
      winHeight > targetHeight ? $target.css('top', winTop + (winHeight - targetHeight) / 2 - headerHeight) : $target.css('top', winTop);
      focus ? $target.show().find(focus).trigger('focus') : $target.show().trigger('focus');

      //딤드 처리
      $('body').append(`<div id="${dimm_id}" class="dimm"></div>`);
      $(`#${dimm_id}`).css('z-index', +$target.css('z-index') - 1).fadeIn();
      $closeModal.attr('data-dimm', `#${dimm_id}`);
      if (!!video) {
        $target.find('video source').attr('src', video);
        $target.find('video')[0].load();
        if (!!opt.caption) {
          $target.find('video').after('<p data-role="caption">' + opt.caption + '</p>');
        }
      }
      if (!!youtube) {
        $target.find('iframe').attr('src', 'https://www.youtube.com/embed/' + youtube + '?rel=0&autoplay=1&howinfo=0&enablejsapi=1').on('load', function () {
          this.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}', '*');
        });
      }
      $target.on('keydown', function (e) {
        if ($target.is(':focus') && e.shiftKey && e.keyCode == 9) {
          e.preventDefault();
          $closeModal.trigger('focus');
        }
      });
      $closeModal.on('keydown', function (e) {
        if (!e.shiftKey && e.keyCode == 9) {
          e.preventDefault();
          $target.trigger('focus');
        }
      });

      // 모달 닫기
      PT_STATE.$PROJECT.off('click.closeModal').on('click.closeModal', '[data-role="closeModal"]', function (e) {
        e.preventDefault();
        const $this = $(this);
        const $target = $($this.attr('data-target'));
        const dimm_id = $this.attr('data-dimm');
        $(dimm_id).fadeOut(function () {
          $(this).remove();
        });
        $target.hide();
        data.$prevfocus.pop().trigger('focus');
        if (!!video) {
          $target.find('video source').attr('src', '');
          if (!!opt.caption) {
            $target.find('[data-role="caption"]').remove();
          }
        }
        if (!!youtube) {
          $target.find('iframe').attr('src', '');
        }
      });
    });
  }
};
const copy = exports.copy = {
  click() {
    const target = new ClipboardJS('[data-role="btnCopy"]');
    const $alertMsg = $('.alert_msg');
    target.on('success', function () {
      $alertMsg.fadeIn();
      setTimeout(function () {
        $alertMsg.fadeOut();
      }, 2800);
      // target.clearSelection();
    });
    target.on('error', function () {
      prompt('', target.data('clipboard-text'));
    });
    PT_STATE.$PROJECT.off('click.clickCopy').on('click.clickCopy', '[data-role="btnCopy"]', function (e) {
      e.preventDefault();
      const msg = $(this).data('alertMsg');
      if (msg) {
        $alertMsg.text(msg);
      } else {
        $alertMsg.text('해시태그가 복사되었습니다.');
      }
    });
  }
};
const countDownEvt = exports.countDownEvt = {
  pad(value) {
    return ('0' + Math.floor(value)).slice(-2);
  },
  init(el, datetime, type) {
    const _second = 1000;
    const _minute = _second * 60;
    const _hour = _minute * 60;
    const _day = _hour * 24;
    let timer;
    const _date = new Date(datetime).getTime();
    var html = '';
    var _el;
    var _time = {
      d: '00',
      h: '00',
      m: '00',
      s: '00'
    };
    function countDown() {
      var distance = _date - new Date().getTime();
      var days = pad(distance / _day);
      var hours = pad(distance % _day / _hour);
      var minutes = pad(distance % _hour / _minute);
      var seconds = pad(distance % _minute / _second);
      if (_time.d !== days) {
        _time.d = days;
        _el.eq(0).html(days);
      }
      if (_time.h !== hours) {
        _time.h = hours;
        _el.eq(1).html(hours);
      }
      if (_time.m !== minutes) {
        _time.m = minutes;
        _el.eq(2).html(minutes);
      }
      if (_time.s !== seconds) {
        _time.s = seconds;
        _el.eq(3).html(seconds);
      }

      // 카운트 종료
      if (distance < 0) {
        clearInterval(timer);
      }
    }
    if (type === 'flip') {
      html = ``;
    } else if (type === 'img') {
      html = ``;
    } else {
      html = `
                <div class="count_box">
                    <div class="count_slot">
                        <div class="count_num en">00</div>
                        <div class="count_txt">일</div>
                    </div>
                    <div class="count_slot">
                        <div class="count_num en">00</div>
                        <div class="count_txt">시간</div>
                    </div>
                    <div class="count_slot">
                        <div class="count_num en">00</div>
                        <div class="count_txt">분</div>
                    </div>
                    <div class="count_slot">
                        <div class="count_num en">00</div>
                        <div class="count_txt">초</div>
                    </div>
                </div>
            `;
    }
    $(el).html(html);
    _el = $(el).find('.count_num');
    timer = setInterval(countDown, 1000);
  }
};
const button = exports.button = {
  all(netFunnel) {
    this.btnPresent(netFunnel);
    this.btnBuy(netFunnel);
    this.btnCart(netFunnel);
    this.btnCouponBook(netFunnel);
  },
  btnPresent(netFunnel) {
    let $btnPresent = PT_STATE.$PROJECT.find('[data-role="btnPresent"]');
    if (!$btnPresent.length) return;
    PT_STATE.$PROJECT.off('click.click_pt_present').on('click.click_pt_present', '[data-role="btnPresent"]', function (e) {
      e.preventDefault();
      let $self = $(this);
      let sku = $self.attr('data-sku');
      if (sku && window.presentDirect) {
        if (!!netFunnel) {
          NetFunnel_Action(netFunnel, function (ev, ret) {
            presentDirect(sku, '_self');
          });
        } else {
          presentDirect(sku, '_self');
        }
      }
    });
  },
  btnBuy(netFunnel) {
    let $btnBuy = PT_STATE.$PROJECT.find('[data-role="btnBuy"]');
    if (!$btnBuy.length) return;
    PT_STATE.$PROJECT.off('click.click_pt_buy').on('click.click_pt_buy', '[data-role="btnBuy"]', function (e) {
      e.preventDefault();
      let $self = $(this);
      let gCode = $self.attr('data-gcode');
      let cpCode = $self.attr('data-cpcode');
      let compNo = $self.attr('data-comp') ? $self.attr('data-comp') : 312;
      let tradeIn = $self.attr('data-tradein') ? $self.attr('data-tradein') : 'N';
      //let ceTradeIn = $self.attr('data-ceTradeIn') ? $self.attr('data-ceTradeIn') : 'N';
      let galaxyClub = $self.attr('data-galaxyClub') ? $self.attr('data-galaxyClub') : 'N';
      let galaxyClubTpCd = $self.attr('data-galaxyClubTpCd') ? $self.attr('data-galaxyClubTpCd') : null;
      if (gCode && window.fnBuyDirectByMultiId) {
        if (!!netFunnel) {
          NetFunnel_Action(netFunnel, function (ev, ret) {
            fnBuyDirectByMultiId([{
              goodsId: gCode,
              qty: 1,
              compNo: compNo,
              tradeIn: tradeIn,
              //ceTradeIn: ceTradeIn,
              galaxyClub: galaxyClub,
              galaxyClubTpCd: galaxyClubTpCd
            }]);
          });
        } else {
          fnBuyDirectByMultiId([{
            goodsId: gCode,
            qty: 1,
            compNo: compNo,
            tradeIn: tradeIn,
            //ceTradeIn: ceTradeIn,
            galaxyClub: galaxyClub,
            galaxyClubTpCd: galaxyClubTpCd
          }]);
        }
      }
    });
  },
  btnCart(netFunnel) {
    let $btnCart = PT_STATE.$PROJECT.find('[data-role="btnCart"]');
    if (!$btnCart.length) return;
    PT_STATE.$PROJECT.off('click.click_pt_cart').on('click.click_pt_cart', '[data-role="btnCart"]', function (e) {
      e.preventDefault();
      let $self = $(this);
      let sku = $self.attr('data-sku');
      let compNo = $self.attr('data-comp') ? $self.attr('data-comp') : 312;
      if (sku && window.fnCartDirect) {
        if (!!netFunnel) {
          NetFunnel_Action(netFunnel, function (ev, ret) {
            fnCartDirect([{
              mdlCode: sku,
              qty: 1,
              compNo: compNo
            }]);
            ;
          });
        } else {
          fnCartDirect([{
            mdlCode: sku,
            qty: 1,
            compNo: compNo
          }]);
          ;
        }
      }
    });
  },
  btnCouponBook(netFunnel) {
    let $btnCouponBook = PT_STATE.$PROJECT.find('[data-role="btnCouponBook"]');
    if (!$btnCouponBook.length) return;
  }
};
if (!window.PT_STATE) window.PT_STATE = {};
window.PT_STATE.$PROJECT = PT_STATE.$PROJECT;
window.PT_STATE.eventState = PT_STATE.eventState;

},{}]},{},[2]);
