(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.anchor = void 0;
var _bs_common = require("./bs_common");
const $window = $(window);
const anchor = exports.anchor = {
  /**
   * 버튼 클릭 시 페이지 내 data-target으로 앵커 이동
   * @param {object} params {'target': str, 'speed': num, 'scroll': [pc,mo]}
   * @desc target : 해당 타켓
   * @desc speed : 이동 속도
   * @desc scroll : 이동 후 추가 여백
   */
  click(params) {
    _bs_common.util.setEventState('clickAnc', params);
    const data = {
      opt: {
        speed: 500,
        scroll: [0, 0]
      },
      params: _bs_common.util.getEventState('clickAnc')
    };
    _bs_common.PT_STATE.$PROJECT.off('click.clickAnc').on('click.clickAnc', '[data-role-anchor]', function (e) {
      e.preventDefault();
      const $this = $(this);
      const {
        target,
        speed = data.opt.speed,
        scroll = data.opt.scroll
      } = _bs_common.util.findItem(data.params, 'el', `[data-role-anchor="${$this.attr('data-role-anchor')}"]`);
      $(target).attr('tabindex', 0);
      $('html, body').stop().animate({
        scrollTop: $(target).offset().top + _bs_common.util.pxToVw(scroll[0], scroll[1])
      }, speed, function () {
        $(target).focusout(function () {
          $(target).removeAttr('tabindex');
        });
      });
      $(target).focus();
    });
  },
  /**
   * 화면 로드 후 paramsData.target으로 앵커드 이동
   * @param {object} params target:해당 타겟, speed: 속도, scroll: 추가 여백
   * @desc key : 기본 anc key값 변경 필요시 사용
   * @desc target : 해당 타켓
   * @desc speed : 이동 속도
   * @desc scroll : 이동 후 추가 여백
   */
  load(params) {
    _bs_common.util.setEventState('loadAnc', params);
    const data = {
      opt: {
        key: 'anc',
        speed: 500,
        scroll: [0, 0]
      },
      params: _bs_common.util.getEventState('loadAnc')
    };
    const param = _bs_common.util.getParameterByName(data.opt.key);
    if (!param) return;
    $window.off('load.loadAnc').on('load.loadAnc', function () {
      try {
        const {
          target,
          speed = data.opt.speed,
          scroll = data.opt.scroll
        } = _bs_common.util.findItem(data.params, 'url', param);
        $(target).attr('tabindex', 0);
        $('html, body').stop().animate({
          scrollTop: $(target).offset().top + _bs_common.util.pxToVw(scroll[0], scroll[1])
        }, speed, function () {
          $(target).focusout(function () {
            $(target).removeAttr('tabindex');
          });
        });
        $(target).focus();
      } catch (err) {
        console.log('해당하는 앵커 영역이 없습니다.');
      }
    });
  }
};

},{"./bs_common":2}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.util = exports.PT_STATE = void 0;
const PT_STATE = exports.PT_STATE = {
  $PROJECT: $('.sec_project_wrap'),
  eventState: {}
};

//  * @todo 해야 하는일
//  * @example <caption>Example usage of method1.</caption>
//  * returns 2
//  * globalNS.method1(5, 10);
//  * @deprecated [더이상 사용되지 않는 기능 버전 0.1]
//  * @version 0.1

const util = exports.util = {
  /**
   * 해당 화면이 768 미만이면 true 리턴
   * @returns boolean
   */
  isMobile() {
    return $(window).outerWidth() <= 768;
  },
  /**
   * ',' 추가 함수 ex) 9999 => 9,999
   * @param {number} numberStr
   */
  addComma(num) {
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  },
  /**
   * ',' 제거 함수 ex) 9,999 => 9999
   * @param {string} numberStr
   */
  removeComma(num) {
    return +num.replace(/,/g, '');
  },
  /**
   * pc 1440, mo 720 기준으로 px값을 vw값으로 변환
   * @param {number} pc pc 픽셀 값
   * @param {number} mo mo 픽셀 값, 인자 값이 없을경우 pc 픽셀 값으로 계산
   */
  pxToVw(pc, mo) {
    const winWidth = $(window).outerWidth();
    const divide = util.isMobile() ? 720 : 1440;
    const pixel = util.isMobile() ? mo === undefined ? pc : mo : pc;
    return pixel >= 0 ? Math.min(pixel, pixel / divide * winWidth) : Math.max(pixel, pixel / divide * winWidth);
  },
  /**
   * makeAlert이 정의가 되어 있으면 makeAlert 함수 호출
   * @param {string} message
   */
  alert: function (message) {
    typeof makeAlert == 'function' ? makeAlert(message) : alert(message);
  },
  /**
   * 현재 주소의 파리미터 값 '=' 뒤에 텍스트 리턴 함수 ex) ?name=value
   * @param {string} name
   * @returns value
   */
  getParameterByName: function (name) {
    const regex = new RegExp(`[\\?&]${name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]')}=([^&#]*)`);
    const results = regex.exec(location.search);
    return results == null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
  },
  /**
   * PT_STATE eventState 상태 값 저장
   * @param {string} key eventState key값
   * @param {object} params eventState value 값
   */
  setEventState: function (key, params) {
    if (!PT_STATE.eventState[key]) {
      PT_STATE.eventState[key] = params;
    } else {
      PT_STATE.eventState[key] = Object.assign(PT_STATE.eventState[key], params);
    }
  },
  /**
   * PT_STATE eventState 상태 값 불러오기
   * @param {string} key eventState key값
   * @returns eventState value 값
   */
  getEventState: function (key) {
    return PT_STATE.eventState[key];
  },
  /**
   * 해당 이벤트의 값을 가진 객체를 return 하는 함수
   * @param {*} params 해당 배열
   * @param {*} key 찾는 key 값
   * @param {*} val 찾는 val 값
   * @returns 해당 객체
   */
  findItem: function (params, key, val) {
    const {
      [key]: evtItem,
      ...item
    } = params.filter(item => item[key] === val)[0];
    return item;
  }
};
window.PT_STATE = PT_STATE;

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tab = void 0;
var _bs_common = require("./bs_common");
const tab = exports.tab = {
  /**
   * 탭 버튼 클릭시 해당 타겟 show 하는 함수
   * @param {object} params {'target': str, 'default': num}
   * @desc target : 해당 타켓
   * @desc default : 화면 로드 시 초기 액티브 index
   */
  click(params) {
    _bs_common.util.setEventState('clickTab', params);
    let firstPass = true;
    const data = {
      params: _bs_common.util.getEventState('clickTab')
    };

    //탭 클릭시 타겟 show
    _bs_common.PT_STATE.$PROJECT.off('click.clickTab').on('click.clickTab', '[data-role-tab] > a', function (e) {
      e.preventDefault();
      const $this = $(this);
      if ($this.hasClass('active')) return;
      const $parent = $this.closest('[data-role-tab]');
      const $tabTarget = `[data-role-tab="${$parent.attr('data-role-tab')}"]`;
      const {
        target
      } = _bs_common.util.findItem(data.params, 'el', $tabTarget);
      const _idx = $this.attr('data-tab-idx');

      //a11y
      $parent.find('.selected_option').remove();
      $this.addClass('active').siblings().removeClass('active');
      $this.append('<span class="blind selected_option">선택됨</span>');

      // if(firstPass === false){ //처음 접속시 포커스 제거
      //     $(target).attr('tabindex', 0);
      //     data.params.forEach(function(item, index){
      //         if(item.el === $tabTarget){
      //             // 앵커이동
      //             if(item.anc === true){ 
      //                 $('html, body').stop().animate({scrollTop:$(target).offset().top - $($tabTarget).outerHeight() }, 500, function(){
      //                     $(target).focusout(function(){
      //                         $(target).removeAttr('tabindex');
      //                     });
      //                 });
      //             }else{
      //                 $(target).focusout(function(){
      //                     $(target).removeAttr('tabindex');
      //                 });
      //             }
      //         }
      //     });
      //     $(target).focus();
      // }

      if (_idx === 'all') {
        $(target).each((idx, item) => {
          $(item).children().show();
        });
        return;
      }
      $(target).each((idx, item) => {
        $(item).children().eq(_idx).show().siblings().hide();
      });
    });

    //초기값 제외 hide 처리
    Object.values(data.params).forEach((item, idx) => {
      const {
        el,
        default: _index = 0
      } = item;
      $(el).children().eq(_index).trigger('click');
      if (idx === Object.values(data.params).length - 1) {
        firstPass = false;
      }
    });
  }
};

},{"./bs_common":2}],4:[function(require,module,exports){
"use strict";

var _bs_common = require("./modules/bs_common");
var _anchor = require("./modules/anchor");
var _tab = require("./modules/tab");
// import { sticky } from './modules/sticky';

// 필요 한 부분만 남기고 제거해서 사용해주세요. 
// 실행소스 참고는 BS스크립트 3버전을 참고해주세요. PROJECT/00_bs_script_v3
$(document).ready(function () {
  function checkDevice() {
    const ua = navigator.userAgent.toLowerCase();
    if (ua.indexOf('secapp') != -1) {
      // 닷컴앱인 경우      
      $('[data-web-only]').hide();
      $('[data-app-only]').show();

      // Z fold se 기기확인
      if (ua.indexOf('sm-f958') == -1) {
        $('[data-zs="Y"]').hide();
        $('[data-zs="N"]').show();
      } else {
        $('[data-zs="N"]').hide();
        $('[data-zs="Y"]').show();
      }
    } else {
      // 웹
      $('[data-app-only]').hide();
      $('[data-web-only]').show();
    }
  }
  _anchor.anchor.load([{
    url: 'recommend',
    target: '.sec_recommend'
  }]);
  _tab.tab.click([{
    el: '[data-role-tab="sec_benefit"]',
    target: '#tab01',
    default: 1
  }]);

  // $('[link-btn]').on('click', function() {
  //     location.href = secapp.startWebBrowser('https://www.microsoft.com/ko-kr/microsoft-365/samsung-offer/');
  //     secapp.startWebBrowser('https://www.microsoft.com/ko-kr/microsoft-365/samsung-offer/');
  // });
  // console.log($('[link-btn]'));

  checkDevice();
  // sticky.init();

  //BNB 미노출 처리
  // $("#bottom__navi").hide();

  viewportChange(); // fold 해상도 대응
});

},{"./modules/anchor":1,"./modules/bs_common":2,"./modules/tab":3}]},{},[4]);
