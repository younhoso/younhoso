(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.anchor = void 0;
var _bs_common = require("./bs_common");
const $window = $(window);
const anchor = exports.anchor = {
  /**
   * 버튼 클릭 시 페이지 내 data-target으로 앵커 이동
   * @param {object} params {'target': str, 'speed': num, 'scroll': [pc,mo]}
   * @desc target : 해당 타켓
   * @desc speed : 이동 속도
   * @desc scroll : 이동 후 추가 여백
   */
  click(params) {
    _bs_common.util.setEventState('clickAnc', params);
    const data = {
      opt: {
        speed: 500,
        scroll: [0, 0]
      },
      params: _bs_common.util.getEventState('clickAnc')
    };
    _bs_common.PT_STATE.$PROJECT.off('click.clickAnc').on('click.clickAnc', '[data-role-anchor]', function (e) {
      e.preventDefault();
      const $this = $(this);
      const {
        target,
        speed = data.opt.speed,
        scroll = data.opt.scroll
      } = _bs_common.util.findItem(data.params, 'el', `[data-role-anchor="${$this.attr('data-role-anchor')}"]`);
      // console.log(target)
      if (target == '.pt_gift__content') {
        $('.pt_gift__btn').trigger('click');
      }
      $(target).attr('tabindex', 0);
      $('html, body').stop().animate({
        scrollTop: $(target).offset().top + _bs_common.util.pxToVw(scroll[0], scroll[1])
      }, speed, function () {
        $(target).focusout(function () {
          $(target).removeAttr('tabindex');
        });
      });
      $(target).focus();
    });
  },
  /**
   * 화면 로드 후 paramsData.target으로 앵커드 이동
   * @param {object} params target:해당 타겟, speed: 속도, scroll: 추가 여백
   * @desc key : 기본 anc key값 변경 필요시 사용
   * @desc target : 해당 타켓
   * @desc speed : 이동 속도
   * @desc scroll : 이동 후 추가 여백
   */
  load(params) {
    _bs_common.util.setEventState('loadAnc', params);
    const data = {
      opt: {
        key: 'anc',
        speed: 500,
        scroll: [0, 0]
      },
      params: _bs_common.util.getEventState('loadAnc')
    };
    const param = _bs_common.util.getParameterByName(data.opt.key);
    if (!param) return;
    $window.off('load.loadAnc').on('load.loadAnc', function () {
      try {
        const {
          target,
          speed = data.opt.speed,
          scroll = data.opt.scroll
        } = _bs_common.util.findItem(data.params, 'url', param);
        $(target).attr('tabindex', 0);
        $('html, body').stop().animate({
          scrollTop: $(target).offset().top + _bs_common.util.pxToVw(scroll[0], scroll[1])
        }, speed, function () {
          $(target).focusout(function () {
            $(target).removeAttr('tabindex');
          });
        });
        $(target).focus();
      } catch (err) {
        console.log('해당하는 앵커 영역이 없습니다.');
      }
    });
  }
};

},{"./bs_common":2}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.util = exports.PT_STATE = void 0;
const PT_STATE = exports.PT_STATE = {
  $PROJECT: $('.sec_project_wrap'),
  eventState: {}
};

//  * @todo 해야 하는일
//  * @example <caption>Example usage of method1.</caption>
//  * returns 2
//  * globalNS.method1(5, 10);
//  * @deprecated [더이상 사용되지 않는 기능 버전 0.1]
//  * @version 0.1

const util = exports.util = {
  /**
   * 해당 화면이 768 미만이면 true 리턴
   * @returns boolean
   */
  isMobile() {
    return $(window).outerWidth() <= 768;
  },
  /**
   * ',' 추가 함수 ex) 9999 => 9,999
   * @param {number} numberStr
   */
  addComma(num) {
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  },
  /**
   * ',' 제거 함수 ex) 9,999 => 9999
   * @param {string} numberStr
   */
  removeComma(num) {
    return +num.replace(/,/g, '');
  },
  /**
   * pc 1440, mo 720 기준으로 px값을 vw값으로 변환
   * @param {number} pc pc 픽셀 값
   * @param {number} mo mo 픽셀 값, 인자 값이 없을경우 pc 픽셀 값으로 계산
   */
  pxToVw(pc, mo) {
    const winWidth = $(window).outerWidth();
    const divide = util.isMobile() ? 720 : 1440;
    const pixel = util.isMobile() ? mo === undefined ? pc : mo : pc;
    return pixel >= 0 ? Math.min(pixel, pixel / divide * winWidth) : Math.max(pixel, pixel / divide * winWidth);
  },
  /**
   * makeAlert이 정의가 되어 있으면 makeAlert 함수 호출
   * @param {string} message
   */
  alert: function (message) {
    typeof makeAlert == 'function' ? makeAlert(message) : alert(message);
  },
  /**
   * 현재 주소의 파리미터 값 '=' 뒤에 텍스트 리턴 함수 ex) ?name=value
   * @param {string} name
   * @returns value
   */
  getParameterByName: function (name) {
    const regex = new RegExp(`[\\?&]${name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]')}=([^&#]*)`);
    const results = regex.exec(location.search);
    return results == null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
  },
  /**
   * PT_STATE eventState 상태 값 저장
   * @param {string} key eventState key값
   * @param {object} params eventState value 값
   */
  setEventState: function (key, params) {
    if (!PT_STATE.eventState[key]) {
      PT_STATE.eventState[key] = params;
    } else {
      PT_STATE.eventState[key] = Object.assign(PT_STATE.eventState[key], params);
    }
  },
  /**
   * PT_STATE eventState 상태 값 불러오기
   * @param {string} key eventState key값
   * @returns eventState value 값
   */
  getEventState: function (key) {
    return PT_STATE.eventState[key];
  },
  /**
   * 해당 이벤트의 값을 가진 객체를 return 하는 함수
   * @param {*} params 해당 배열
   * @param {*} key 찾는 key 값
   * @param {*} val 찾는 val 값
   * @returns 해당 객체
   */
  findItem: function (params, key, val) {
    const {
      [key]: evtItem,
      ...item
    } = params.filter(item => item[key] === val)[0];
    return item;
  }
};
window.PT_STATE = PT_STATE;

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.component_tab = void 0;
var _bs_common = require("./bs_common");
const component_tab = exports.component_tab = {
  init() {
    //기본값
    let flag = false;
    let $component = $('[data-cptno]'); // 컴포넌트 
    let $category = $('[data-compo-cate]'); // 카테고리
    let categorySwiper = []; //각 카테고리 스와이퍼
    let cateEnd = []; //각 카테고리의 마지막 컴포넌트
    let cateSwp = []; //모바일 카테고리 스와이퍼 제어 true:작동on/false:작동off 초기값 true
    let cateSticky = []; //컴포넌트 스티키 제어 true:스티키/false:스티키 제거 초기값 true
    let dataCompCate = []; // 컴포넌트 호출함수 구분 product-card / product-selection
    let dataCptno = []; // 전체 콤포넌트 번호 담는 변수
    let compFirst = []; // 스크롤로 자기영역 위치시 카테고리의 ".on"위치의 컴포넌트만 불러오기 할때 사용. 처음 한번만 실행됨
    let compLength = 0;
    let compSumLength = 0;
    let url = location.href;
    let _scrollTop = $(window).scrollTop();
    $category.each(function (index, el) {
      let $this = $(this);
      $this.addClass('pt_comp_cate' + index);
      $this.css('height', $this.find('.pt_slider_category_wrap').outerHeight());
      compFirst[index] = true;
      if ($this.attr('data-swiper')) {
        cateSwp[index] = $this.attr('data-swiper');
      } else {
        cateSwp[index] = 'true';
      }
      if ($this.attr('data-sticky')) {
        cateSticky[index] = $this.attr('data-sticky');
      } else {
        cateSticky[index] = 'true';
      }
    });

    //설정영역
    $category.each(function (index, el) {
      let $this = $(this);
      let cateActive = $this.find('li').closest('.on').index();

      //탭동작
      compLength += $this.find('li').length;
      $component.each(function (idx, item) {
        dataCptno[idx] = $component.eq(idx).attr('data-cptno');
        if (compSumLength <= idx && idx < compLength) {
          // 컴포넌트 번호 카테고리 버튼에 넣기
          $this.find('li').eq(idx - compSumLength).find('a').attr('data-cpntnum', dataCptno[idx]);
        }
      });
      $component.each(function (idx, item) {
        if (compSumLength <= idx && idx < compLength) {
          if (idx == compSumLength + cateActive) {
            $component.eq(idx).removeClass('pt_hide');
          } else {
            $component.eq(idx).addClass('pt_hide');
          }
        }
      });
      compSumLength += $this.find('li').length;

      // 스크롤이 해당영역 위치시 컴포넌트 호출
      if (_scrollTop >= $this.find('.pt_slider_category_sticky').offset().top - $(window).height()) {
        console.log(_scrollTop >= $this.find('.pt_slider_category_sticky').offset().top - $(window).height());
        if (compFirst[index] == true) {
          // 첫번째 컴포넌트 가져오기
          let cpntNum = $this.find('li.on').find('a').attr('data-cpntnum');
          dataCompCate[index] = $this.attr('data-compo-cate');
          if (url.indexOf('www.samsung.com/sec') > -1) {
            if (cpntNum) {
              if (dataCompCate[index] == "product-card") {
                fnGetProdCardCompGoodsList(cpntNum);
              } else if (dataCompCate[index] == "product-selection") {
                fnGetProdSelectionCompGoodsList(cpntNum);
              }
            }
          }
          $this.find('li.on').find('a').removeAttr('data-cpntnum');
          compFirst[index] = false;
        }
      }
    });
    function resizeSwiper() {
      $category.each(function (index, el) {
        let $this = $(this);
        if (cateSwp[index] == 'true') {
          categorySwiper[index] = new Swiper('.pt_comp_cate' + index + ' .swiper-container', {
            allowTouchMove: true,
            slidesPerView: 'auto',
            watchOverflow: true,
            // 다음슬라이드가 없을때 pager, button 숨김 여부 설정
            observer: true,
            observeParents: true,
            observeSlideChildren: true,
            breakpoints: {
              769: {
                allowTouchMove: false
              }
            },
            on: {
              init: function () {
                $this.removeClass('pt_noSwiper');
                // 슬라이드를 안해도 될때 자동으로 체크
                if (this.isLocked == true) {
                  $this.addClass('pt_noSwiper');
                }
              },
              breakpoint: function () {
                let that = this;
                setTimeout(function () {
                  that.slideTo(0, 0);
                }, 150);
              }
            }
          });
        } else {
          $this.addClass('pt_noSwiper');
        }
      });
    }
    resizeSwiper();
    let resizeTimer = null;
    window.addEventListener('resize', function () {
      clearTimeout(resizeTimer);
      resizeTimer = setTimeout(resizeSwiper, 400);
    }, false);
    let scrollMove = function () {
      _scrollTop = $(window).scrollTop();
      compLength = 0;
      compSumLength = 0;
      $category.each(function (index, el) {
        let $this = $(this);

        //카테고리 높이값 자동조절
        $this.css('height', $this.find('.pt_slider_category_wrap').outerHeight());

        //카테고리 li갯수 담기
        compLength += $this.find('li').length;

        //각카테고리의 마지막 컴포넌트 가져오기
        cateEnd[index] = $component.eq(compLength - 1);

        // 스크롤시 해당영역 컴포넌트 호출
        if (_scrollTop >= $this.find('.pt_slider_category_sticky').offset().top - $(window).height()) {
          if (compFirst[index] == true) {
            // 첫번째 컴포넌트 가져오기
            let cpntNum = $this.find('li.on').find('a').attr('data-cpntnum');
            dataCompCate[index] = $this.attr('data-compo-cate');
            if (url.indexOf('www.samsung.com/sec') > -1) {
              if (cpntNum) {
                if (dataCompCate[index] == "product-card") {
                  fnGetProdCardCompGoodsList(cpntNum);
                } else if (dataCompCate[index] == "product-selection") {
                  fnGetProdSelectionCompGoodsList(cpntNum);
                }
              }
            }
            $this.find('li.on').find('a').removeAttr('data-cpntnum');
            compFirst[index] = false;
          }
        }

        // 컴포넌트 카테고리 sticky 처리
        if (cateSticky[index] != 'false' && _scrollTop >= $this.find('.pt_slider_category_sticky').offset().top && _scrollTop <= cateEnd[index].offset().top + cateEnd[index].outerHeight() - $this.outerHeight()) {
          $this.find('.pt_slider_category_sticky').addClass('fixed');
        } else {
          $this.find('.pt_slider_category_sticky').removeClass('fixed');
        }
      });
    };
    $(window).on('scroll.scroll', scrollMove);

    // 컴포넌트 카테고리 이벤트(클릭시 위치이동)
    _bs_common.PT_STATE.$PROJECT.off('click.compClickCate').on('click.compClickCate', '[data-compo-cate] .pt_category_list a', function (e) {
      e.preventDefault();
      let $this = $(this).closest('li');
      let click_idx = $this.index();
      let parenstName = $this.closest('[data-compo-cate]');
      let _parenstScrollTop = parenstName.offset().top;
      _scrollTop = $(window).scrollTop();
      compLength = 0;
      compSumLength = 0;
      $('.pt_category_list a').find('.selected_option').remove();
      $(this).append('<span class="blind selected_option">선택됨</span>');
      if (!flag) {
        flag = true;
        $this.closest('.pt_slider_category_wrap').find('.pt_category_list').each(function () {
          $(this).find('li').eq(click_idx).addClass('on').siblings().removeClass('on');
          let cpntNum = $(this).find('li').eq(click_idx).find('a').attr('data-cpntnum');
          let compCate = parenstName.attr('data-compo-cate');
          if (cpntNum) {
            if (url.indexOf('www.samsung.com/sec') > -1) {
              if (cpntNum) {
                if (compCate == "product-card") {
                  fnGetProdCardCompGoodsList(cpntNum);
                } else if (compCate == "product-selection") {
                  fnGetProdSelectionCompGoodsList(cpntNum);
                }
              }
            }
          }
          $(this).find('li').eq(click_idx).find('a').removeAttr('data-cpntnum');
        });
        $category.each(function (index, el) {
          let $this = $(this);
          compLength += $this.find('li').length;
          // cateEnd[index] = $component.eq(compLength-1);

          if (parenstName.hasClass('pt_comp_cate' + index)) {
            $component.each(function (idx, item) {
              if (compSumLength <= idx && idx < compLength) {
                if (click_idx + compSumLength == idx) {
                  $component.eq(idx).removeClass('pt_hide');
                  $component.eq(idx).find('.component-contents').css('opacity', 0);
                } else {
                  $component.eq(idx).addClass('pt_hide');
                }
              }
            });
            if ($(window).outerWidth() <= 768 && cateSwp[index] == 'true') {
              categorySwiper[index].slideTo(click_idx);
            }
            let compTarget = $component.eq(click_idx + compSumLength);
            $(compTarget).attr('tabindex', 0);

            // 컴포넌트 영역 위쪽에서 클릭했을때만 애니메이션 이동
            if (_scrollTop < _parenstScrollTop) {
              $('html, body').stop().animate({
                scrollTop: compTarget.offset().top - $this.find('.pt_slider_category_wrap').outerHeight() / 1.01
              }, 500, function () {
                $(compTarget).focusout(function () {
                  $(compTarget).removeAttr('tabindex');
                });
              });
            } else {
              $('html, body').stop().animate({
                scrollTop: compTarget.offset().top - $this.find('.pt_slider_category_wrap').outerHeight() / 1.01
              }, 1, function () {
                $(compTarget).focusout(function () {
                  $(compTarget).removeAttr('tabindex');
                });
              });
            }
            $(compTarget).focus();
            flag = false;
          }
          compSumLength += $this.find('li').length;
        });
      }
      setTimeout(function () {
        $(window).resize();
        $('div.wrap-component .component-contents').animate({
          opacity: '1'
        }, 300);
      }, 130);
    });
    _bs_common.PT_STATE.$PROJECT.off('click.popupCate').on('click.popupCate', '.pt_btn_popup_category', function (e) {
      e.preventDefault();
      if ($(this).closest('.pt_slider_category_wrap').hasClass('popup')) {
        $(this).closest('.pt_slider_category_wrap').removeClass('popup');
        $(this).attr('title', '카테고리 탭 메뉴 열기').find('span.blind').text('카테고리 탭 메뉴 열기');
      } else {
        $(this).closest('.pt_slider_category_wrap').addClass('popup');
        $(this).attr('title', '카테고리 탭 메뉴 닫기').find('span.blind').text('카테고리 탭 메뉴 닫기');
      }
    });
  }
};

},{"./bs_common":2}],4:[function(require,module,exports){
"use strict";

var _bs_common = require("./modules/bs_common");
var _component_tab = require("./modules/component_tab");
var _anchor = require("./modules/anchor");
$(document).ready(function () {
  _anchor.anchor.click([{
    el: '[data-role-anchor="pt_notice"]',
    target: '.sec_notice'
  }]);
  function lozadEvt() {
    const observerbg = lozad('.pt_bg-image', {
      loaded: function (el) {
        el.classList.add('pt_add-bg');
      }
    });
    observerbg.observe();
  }
  _component_tab.component_tab.init();
  lozadEvt();
  viewportChange(); // fold 해상도 대응
});

},{"./modules/anchor":1,"./modules/bs_common":2,"./modules/component_tab":3}]},{},[4]);
